package Stream;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.time.LocalDate;import java.time.Month;import java.util.Comparator;import java.util.List;import java.util.stream.Collectors;import java.util.*;import java.util.Scanner;public class Step2 {    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        System.out.println("Введите число :");        String number = scanner.nextLine();        Stack<Character> stack = number.chars().mapToObj(c -> (char) c).collect(Collectors.toCollection(Stack::new));        while (!stack.isEmpty()) {            System.out.println(stack.pop());        }    }}class Step4 {    public static void main(String[] args) throws IOException {        List<String> poem = new ArrayList<>();        poem.add("кошка");        poem.add("бросила");        poem.add("котят");        poem.add("пусть");        poem.add("ебуться");        poem.add("как");        poem.add("хотят");        List<String> list = poem.stream().sorted(Comparator.comparing(s -> s, (Comparator.naturalOrder()))).toList();        System.out.println(list);        // Iterator<String> iterator = poem.iterator();        //  while (iterator.hasNext()){        //    String next = iterator.next();        // iterator.remove();        //}        // System.out.println(poem);    }}class Step5 {    public static void main(String[] args) {        Stack<String> stack1 = new Stack<>();        stack1.push("Dog");        stack1.push("Rat");        stack1.push("Cow");        Stack<String> stack2 = new Stack<>();        stack2.push("Cat");        stack2.push("Snake");        Stack<String> time = new Stack<>();        int size = stack1.size();        for (int i = 0; i < size; i++) {            String item = stack1.pop();            time.push(item);        }        Stack<String> time2 = new Stack<>();        int size1 = stack2.size();        for (int i = 0; i < size1; i++) {            String value1 = stack2.pop();            time2.push(value1);        }        size = time.size();        for (int i = 0; i < size; i++) {            String item = time.pop();            stack2.push(item);        }        size1 = time2.size();        for (int i = 0; i < size1; i++) {            String item = time2.pop();            stack1.push(item);        }        System.out.println(stack1);        System.out.println(stack2);    }}class Step11 {    public static void main(String[] args) {        Deque<Integer> deque = new ArrayDeque<>();        deque.add(-50);        deque.add(10);        deque.add(-7);        deque.add(-17);        deque.add(20);        deque.add(17);        deque.add(37);        Iterator<Integer> iterator = deque.iterator();        while (iterator.hasNext()) {            int number = iterator.next();            if (number < 0) {                iterator.remove();                deque.add(number);            }        }        System.out.println(deque);    }}class Step16 {    public static void main(String[] args) {        Map<Integer, String> map = new HashMap<>();        map.put(0, "строка");        map.put(1, "рыба");        map.put(2, "карась");        map.put(14, "дом");        map.put(35, "страна");        map.put(16, "футбол");        map.put(77, "жизнь");        map.put(81, "гитара");        map.put(9, "пиво");        map.put(10, "сигарета");        StringBuilder res = new StringBuilder();        res.append("Ключи > 5 : ");        long reduce = map.entrySet().stream()                .filter(s -> s.getKey() > 5)                .peek(s -> res.append(s.getValue()).append(","))                .mapToLong(Map.Entry::getKey)                .reduce(1, (a, b) -> a * b);        System.out.println(res.substring(0, res.length() - 1));        System.out.println("Умноженные ключ > 5 : " + reduce);    }}class Student {    Map<String, Integer> rating;    private String name;    public Student(String name) {        rating = new HashMap<>();        this.name = name;    }    public Student rate(String subject, Integer rate) {        rating.put(subject, rate);        return this;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}class StudentEx2 {    public static void main(String[] args) {        Student student = new Student("Влад");        Student student1 = new Student("Женя");        Student student2 = new Student("Глеб");        Student student3 = new Student("Аня");        List<Student> students = new ArrayList<>();        students.add(student);        students.add(student1);        students.add(student2);        students.add(student3);        student.rate("Математика", 7);        student1.rate("Математика", 4);        student2.rate("Математика", 8);        student3.rate("Математика", 9);        student.rate("Русский язык", 8);        student1.rate("Русский язык", 7);        student3.rate("Русский язык", 6);        student.rate("История", 5);        student1.rate("История", 6);        String targetSubject = "Русский язык";        String targetSubject1 = "Математика";        String targetSubject2 = "История";        students.stream()                   .flatMap(s -> s.rating.entrySet().stream())                   .filter(s -> s.getKey().equals(targetSubject1) || s.getKey().equals(targetSubject))                   .mapToInt(Map.Entry::getValue)                   .average()                   .ifPresent(System.out::println);        //System.out.println("Студенты : " + student.getName() + "Средний балл по предметам : " + targetSubject + " и " + targetSubject1 + studentAverage);}class Main {    public static void main(String[] args) throws FileNotFoundException {        Scanner scanner = new Scanner(new File("D:/Java/Vlad.txt"));        List<String> lines = new ArrayList<>();        while (scanner.hasNextLine()) {            String line = scanner.nextLine();            lines.add(line);        }        scanner.close();        lines.sort(Comparator.comparingInt(String::length));        for (String s : lines) {            System.out.println(s);        }    }}    static class Task{    private final String id;    private final String title;    private final TaskType type;    private final LocalDate createdOn;    private boolean done = false;    private Set<String> tags = new HashSet<>();    private LocalDate dueTo;    // Конструктор класса    public Task(String id, String title, TaskType type, LocalDate createdOn) {        this.id = id;        this.title = title;        this.type = type;        this.createdOn = createdOn;    }    public Task addTag(String tag) {        tags.add(tag);        return this;    }    public LocalDate getCreatedOn() {        return createdOn;    }    public String getTitle() {        return title;    }}class TaskEx1{    public static void main(String[] args) {        Task task1 = new Task("1", "Read Version Control with Git book", TaskType.READING, LocalDate.of(2015, Month.JULY, 1))                .addTag("git").addTag("reading").addTag("books");        Task task2 = new Task("2", "Read Java 8 Lambdas book", TaskType.READING, LocalDate.of(2015, Month.JULY, 2))                .addTag("java8").addTag("reading").addTag("books");        Task task3 = new Task("3", "Write a mobile application to store my tasks", TaskType.CODING, LocalDate.of(2015, Month.JULY, 3))                .addTag("coding").addTag("mobile");        Task task4 = new Task("4", "Write a blog on Java 8 Streams", TaskType.WRITING, LocalDate.of(2015, Month.JULY, 4))                .addTag("blogging").addTag("writing").addTag("streams");        Task task5 = new Task("5", "Read Domain Driven Design book", TaskType.READING, LocalDate.of(2015, Month.JULY, 5))                .addTag("ddd").addTag("books").addTag("reading");        Task task6 = new Task("5", "Read Domain Driven Design book", TaskType.READING, LocalDate.of(2019, Month.JULY, 6))                .addTag("ddd").addTag("books").addTag("reading");        Task task7 = new Task("5", "Read Domain Driven Design book", TaskType.READING, LocalDate.of(2021, Month.JULY, 10))                .addTag("ddd").addTag("books").addTag("reading");        List<Task> tasks = Arrays.asList(task1, task2, task3, task4, task5,task6,task7);        String title = tasks.stream()                .sorted(Comparator.comparing(Task::getCreatedOn))                .map(Task::getTitle)                .collect(Collectors.joining(","));        System.out.println("Отсортированные задачи " + title);    }class Chars{    public static void main(String[] args) {      String  a = "aaabbxxxxxtx";       String b = "p1p1p1p";           long count = a.chars()                   .filter(s -> s == 'x')                   .count();           System.out.println(" x " + count);         long count1 = b.chars()                 .filter(s -> s == 'p')                 .count();         System.out.println(" p " + count1);    }} static class Person {    private Long personId;    private String name;    private List<Skill> skills;    public Person(Long personId, String name, Skill... skills) {        this.personId = personId;        this.name = name;        this.skills = List.of(skills);    }    public Long getPersonId() {        return personId;    }    public void setPersonId(Long personId) {        this.personId = personId;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public List<Skill> getSkills() {        return skills;    }    public void setSkills(List<Skill> skills) {        this.skills = skills;    }    @Override    public String toString() {        return name;    }}static class Skill {    private String name;    private long knownPercentage;    public Skill(String name, long knownPercentage) {        this.name = name;        this.knownPercentage = knownPercentage;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public long getKnownPercentage() {        return knownPercentage;    }    public void setKnownPercentage(long knownPercentage) {        this.knownPercentage = knownPercentage;    }    @Override    public String toString() {        return "Skill{" +                "name='" + name + '\'' +                ", knownPercentage=" + knownPercentage +                '}';    }}class Main1 {        public static void main(String[] args) {            Person person = new Person(1L, "Lokesh", new Skill("English", 50), new Skill("Kannada", 20), new Skill("Hindi", 10));            Person person2 = new Person(2L, "Mahesh", new Skill("English", 30), new Skill("Kannada", 30), new Skill("Hindi", 50));            Person person3 = new Person(3L, "Ganesh", new Skill("English", 60), new Skill("Kannada", 20), new Skill("Hindi", 40));            Person person4 = new Person(4L, "Ramesh", new Skill("English", 35), new Skill("Kannada", 20), new Skill("Hindi", 40));            Person person5 = new Person(5L, "Suresh", new Skill("English", 70), new Skill("Kannada", 40), new Skill("Hindi", 40));            Person person6 = new Person(6L, "Gnanesh", new Skill("English", 100), new Skill("Kannada", 20), new Skill("Hindi", 40));            List<Person> persons = new ArrayList<>();            persons.add(person);            persons.add(person2);            persons.add(person3);            persons.add(person4);            persons.add(person5);            persons.add(person6);            List<Person> sortedByEnglishSkills = persons.stream()                    .sorted(Comparator.comparing(p -> p.getSkills().stream()                            .filter(skill -> skill.getName().equals("English"))                            .mapToLong(Skill::getKnownPercentage)                            .sum()))                    .toList();            System.out.println(sortedByEnglishSkills);        }    }}}